% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mistral_embed_images.R
\name{mistral_embed_images}
\alias{mistral_embed_images}
\title{Embed Base64 Images in Markdown Content}
\usage{
mistral_embed_images(markdown_text, mistral_response, page_num = 1)
}
\arguments{
\item{markdown_text}{Character string. The markdown content to process.}

\item{mistral_response}{A Mistral OCR response object containing pages with image data.}

\item{page_num}{Integer. The page number to extract images from (default: 1).}
}
\value{
Character string. The processed markdown with embedded image data URIs.
}
\description{
This function processes markdown content and replaces image references with
embedded base64 data URIs from a Mistral OCR response object. This allows
images to be displayed inline in HTML without external files.
}
\details{
The function looks for image references in the markdown and replaces them with
HTML img tags containing base64-encoded image data. This is useful for rendering
OCR results in Shiny applications or R Markdown documents.

Supported image reference patterns:
\itemize{
\item \verb{![img-0.jpeg](img-0.jpeg)}, \verb{![img-1.jpeg](img-1.jpeg)}, etc. (Mistral's default format)
\item \verb{![image1]}, \verb{![image2]}, etc.
\item \verb{![1]}, \verb{![2]}, etc.
\item Generic \verb{![](...)} patterns
}
}
\examples{
\dontrun{
# Process markdown with embedded images
markdown_with_images <- mistral_embed_images(
  markdown_text = ocr_result$pages[[1]]$markdown,
  mistral_response = ocr_result,
  page_num = 1
)
}

}
\author{
Nathan C. Layman
}
